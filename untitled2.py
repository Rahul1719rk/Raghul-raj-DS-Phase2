# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1flIdBR5bPgSRttMFUlOg2nTERHRrp5I2
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression

# Simulate time series
np.random.seed(42)
dates = pd.date_range(start="2022-01-01", periods=200)
actual = np.cumsum(np.random.randn(200)) + 100
pred_lstm = actual + np.random.normal(0, 1, size=200)
pred_lr = actual + np.random.normal(0, 3, size=200)

# Create DataFrame
df = pd.DataFrame({
    'Date': dates,
    'Actual': actual,
    'LSTM': pred_lstm,
    'LR': pred_lr
}).set_index('Date')

# 1. Actual vs Predicted Plot
plt.figure(figsize=(10,5))
plt.plot(df['Actual'], label='Actual', color='black')
plt.plot(df['LSTM'], label='LSTM', color='blue')
plt.plot(df['LR'], label='Linear Regression', color='red')
plt.title('Actual vs Predicted Stock Prices')
plt.xlabel('Date'); plt.ylabel('Price'); plt.legend(); plt.grid(True)
plt.show()

# 2. Residual Plot
residuals_lstm = df['Actual'] - df['LSTM']
residuals_lr = df['Actual'] - df['LR']
plt.figure(figsize=(10,5))
sns.histplot(residuals_lstm, label='LSTM Residuals', color='blue', kde=True)
sns.histplot(residuals_lr, label='LR Residuals', color='red', kde=True)
plt.axvline(0, color='black', linestyle='--'); plt.title('Residual Plot')
plt.xlabel('Residual'); plt.legend(); plt.show()

# 3. Line Plot of Stock Prices with Forecast
future_dates = pd.date_range(start=dates[-1] + pd.Timedelta(days=1), periods=10)
future_lstm = df['Actual'].iloc[-1] + np.cumsum(np.random.normal(0, 1, 10))
future_lr = df['Actual'].iloc[-1] + np.cumsum(np.random.normal(0, 3, 10))

plt.figure(figsize=(12,5))
plt.plot(df['Actual'], label='Historical', color='black')
plt.plot(df['LSTM'], label='LSTM Prediction', color='blue', linestyle='--')
plt.plot(df['LR'], label='LR Prediction', color='red', linestyle='--')
plt.plot(future_dates, future_lstm, label='LSTM Forecast', color='blue', linestyle=':')
plt.plot(future_dates, future_lr, label='LR Forecast', color='red', linestyle=':')
plt.title('Stock Price History and Forecast')
plt.xlabel('Date'); plt.ylabel('Price'); plt.legend(); plt.grid(True)
plt.show()

# 4. Feature Importance for Linear Regression (Simulated)
# Simulate X and model
X_train = pd.DataFrame({
    'lag_1': np.random.randn(200),
    'lag_2': np.random.randn(200),
    'RSI': np.random.randn(200),
    'rolling_mean_5': np.random.randn(200),
    'volume': np.random.randn(200)
})
y_train = actual + np.random.randn(200)
lr_model = LinearRegression().fit(X_train, y_train)

# Feature importance
coeffs = pd.Series(np.abs(lr_model.coef_), index=X_train.columns)
coeffs.sort_values(ascending=True).plot(kind='barh', title='Feature Importance (Linear Regression)', color='teal')
plt.xlabel('Importance'); plt.tight_layout(); plt.show()